import logging
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# ‚Äî –í–ê–® –¢–û–ö–ï–ù –ò ID –ì–†–£–ü–ü–´ ‚Äî
TOKEN = "7993696802:AAHsaOyLkComr4mr2WsC-EgnB5jcHKjd7Ho"
GROUP_CHAT_ID = -1002344973979  # ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã

# ‚Äî –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ ‚Äî
NAME, PHONE, TARIFF, COMPANY = range(4)

logging.basicConfig(level=logging.INFO)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—É—Å–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞, –ø—Ä–æ—Å–∏–º –§–ò–û."""
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    return NAME


async def name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["fio"] = update.message.text
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return PHONE


async def phone_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["phone"] = update.message.text
    await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ (–°—Ç–∞—Ä—Ç, –ë–∏–∑–Ω–µ—Å –∏–ª–∏ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π):"
    )
    return TARIFF


async def tariff_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["tariff"] = update.message.text
    await update.message.reply_text("–ò, –Ω–∞–∫–æ–Ω–µ—Ü, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:")
    return COMPANY


async def company_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["company"] = update.message.text

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    data = context.user_data
    summary = (
        f"üì¨ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!*\n"
        f"‚Ä¢ *–§–ò–û:* _{data['fio']}_\n"
        f"‚Ä¢ *–¢–µ–ª–µ—Ñ–æ–Ω:* `{data['phone']}`\n"
        f"‚Ä¢ *–¢–∞—Ä–∏—Ñ:* _{data['tariff']}_\n"
        f"‚Ä¢ *–ö–æ–º–ø–∞–Ω–∏—è:* _{data['company']}_"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
    await context.bot.send_message(
        chat_id=GROUP_CHAT_ID, text=summary, parse_mode="Markdown"
    )

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É.")
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END


def main() -> None:
    app = ApplicationBuilder().token(TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name_handler)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone_handler)],
            TARIFF: [MessageHandler(filters.TEXT & ~filters.COMMAND, tariff_handler)],
            COMPANY: [MessageHandler(filters.TEXT & ~filters.COMMAND, company_handler)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv)

    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ polling
    app.run_polling()


if __name__ == "__main__":
    main()
