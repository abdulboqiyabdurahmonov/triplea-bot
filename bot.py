import os
import logging
from fastapi import FastAPI, Request, HTTPException
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Update
from aiogram.dispatcher.webhook import ConfigureDispatcher

# 1) –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# 2) –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logger.error("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏!")
    raise RuntimeError("BOT_TOKEN is required")

# 3) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Bot –∏ Dispatcher
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()

# 4) FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI()

# 5) –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ‚Äî —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
@app.on_event("startup")
async def on_startup():
    webhook_url = os.getenv("WEBHOOK_URL")
    if not webhook_url:
        logger.error("–ù–µ –∑–∞–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è WEBHOOK_URL!")
        raise RuntimeError("WEBHOOK_URL is required")
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(webhook_url)
    logger.info(f"Webhook set to {webhook_url}")

# 6) –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ ‚Äî —É–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫
@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()
    await bot.session.close()

# 7) –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Telegram-–∞–ø–¥–µ–π—Ç–æ–≤ –ø–æ POST /webhook
@app.post("/webhook")
async def telegram_webhook(request: Request):
    try:
        data = await request.json()
        update = Update(**data)
    except Exception as e:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å Update")
        raise HTTPException(status_code=400, detail="Invalid update")
    # –ü–µ—Ä–µ–¥–∞—ë–º –∞–ø–¥–µ–π—Ç –≤ Aiogram
    await dp.feed_update(update)
    return {"ok": True}

# 8) –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–∞—Ä—É –ø—Ä–æ—Å—Ç—ã—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
@dp.message(Command(commands=["start"]))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —ç—Ö–æ-–±–æ—Ç. –ü—Ä–∏—à–ª–∏ –º–Ω–µ —á—Ç–æ —É–≥–æ–¥–Ω–æ ‚Äî —è –≤–µ—Ä–Ω—É —ç—Ç–æ –æ–±—Ä–∞—Ç–Ω–æ."
    )

@dp.message()  # –ª—é–±–æ–π —Ç–µ–∫—Å—Ç
async def echo_all(message: types.Message):
    await message.answer(f"–í—ã —Å–∫–∞–∑–∞–ª–∏: {message.text}")

# 9) –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (uvicorn bot:app)
if __name__ == "__main__":
    import uvicorn
    port = int(os.getenv("PORT", 8000))
    uvicorn.run("bot:app", host="0.0.0.0", port=port, reload=True)

