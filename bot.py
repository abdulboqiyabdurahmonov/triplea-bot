import os
import json
from fastapi import FastAPI, Request
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_ID = int(os.getenv("GROUP_ID", 0))  # ID Telegram-–≥—Ä—É–ø–ø—ã –¥–ª—è –∑–∞—è–≤–æ–∫
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "")  # –î–æ–º–µ–Ω —Å https://
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "/webhook")
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets
GSHEET_CREDENTIALS_JSON = os.getenv("GSHEET_CREDENTIALS_JSON")  # JSON —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
GSHEET_SHEET_ID = os.getenv("GSHEET_SHEET_ID")               # ID —Ç–∞–±–ª–∏—Ü—ã

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
app = FastAPI()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
sheet = None
if GSHEET_CREDENTIALS_JSON and GSHEET_SHEET_ID:
    creds_dict = json.loads(GSHEET_CREDENTIALS_JSON)
    creds = ServiceAccountCredentials.from_json_keyfile_dict(
        creds_dict,
        scopes=[
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/drive"
        ]
    )
    gc = gspread.authorize(creds)
    sheet = gc.open_by_key(GSHEET_SHEET_ID).sheet1

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–π
class Form(StatesGroup):
    lang = State()
    name = State()
    phone = State()
    company = State()
    tariff = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
lang_kb = types.InlineKeyboardMarkup(row_width=2)
lang_kb.add(
    types.InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data="ru"),
    types.InlineKeyboardButton("O‚Äòzbek", callback_data="uz")
)
tariff_kb = types.InlineKeyboardMarkup(row_width=1)
tariff_kb.add(
    types.InlineKeyboardButton("–°—Ç–∞—Ä—Ç (750 —Å—É–º/–∑–≤–æ–Ω–æ–∫)", callback_data="–°—Ç–∞—Ä—Ç"),
    types.InlineKeyboardButton("–ë–∏–∑–Ω–µ—Å (600 —Å—É–º/–∑–≤–æ–Ω–æ–∫)", callback_data="–ë–∏–∑–Ω–µ—Å"),
    types.InlineKeyboardButton("–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤ (450 —Å—É–º/–∑–≤–æ–Ω–æ–∫)", callback_data="–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤")
)

# –•—ç–Ω–¥–ª–µ—Ä—ã
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message, state: FSMContext):
    await state.set_state(Form.lang)
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Iltimos tilni tanlang:",
        reply_markup=lang_kb
    )

@dp.callback_query_handler(lambda c: c.data in ["ru", "uz"], state=Form.lang)
async def process_lang(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(lang=call.data)
    await state.set_state(Form.name)
    prompt = "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:" if call.data == "ru" else "Ismingizni kiriting:"
    await call.message.answer(prompt)
    await call.answer()

@dp.message_handler(state=Form.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Form.phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

@dp.message_handler(state=Form.phone)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await state.set_state(Form.company)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:")

@dp.message_handler(state=Form.company)
async def process_company(message: types.Message, state: FSMContext):
    await state.update_data(company=message.text)
    await state.set_state(Form.tariff)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=tariff_kb)

@dp.callback_query_handler(lambda c: c.data in ["–°—Ç–∞—Ä—Ç", "–ë–∏–∑–Ω–µ—Å", "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤"], state=Form.tariff)
async def process_tariff(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    tariff = call.data
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
    text = (
        f"üì• <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>\n\n"
        f"üë§ <b>–ò–º—è:</b> {data.get('name')}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data.get('phone')}\n"
        f"üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {data.get('company')}\n"
        f"üíº <b>–¢–∞—Ä–∏—Ñ:</b> {tariff}"
    )
    await bot.send_message(GROUP_ID, text)
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Google Sheets (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
    if sheet:
        try:
            sheet.append_row([
                data.get('lang'),
                data.get('name'),
                data.get('phone'),
                data.get('company'),
                tariff
            ])
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets:", e)
    # –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    thank = (
        "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞." 
        if data.get('lang') == "ru" 
        else "Rahmat! Arizangiz qabul qilindi."
    )
    await call.message.answer(thank)
    await state.finish()
    await call.answer()

@dp.message_handler(commands=["cancel"], state="*")
async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.reply("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

# Webhook –∏ —Å–µ—Ä–≤–µ—Ä
@app.post(WEBHOOK_PATH)
async def webhook(request: Request):
    data = await request.json()
    update = types.Update(**data)
    await dp.process_update(update)
    return {"ok": True}

@app.on_event("startup")
async def on_startup():
    await bot.set_webhook(WEBHOOK_URL + WEBHOOK_PATH)

@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()
    await storage.close()
    await storage.wait_closed()

if __name__ == "__main__":
    import uvicorn
    port = int(os.getenv("PORT", 8000))
    uvicorn.run("telegram_bot:app", host="0.0.0.0", port=port, log_level="info")
