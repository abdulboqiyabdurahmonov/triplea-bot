from fastapi.middleware.trustedhost import TrustedHostMiddleware

# –ß—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –ø–æ–ª–Ω—ã–µ —Å—Ç–µ–∫—Ç—Ä–µ–π—Å—ã –≤ –ª–æ–≥–∞—Ö
uvicorn_logger = logging.getLogger("uvicorn.error")
uvicorn_logger.setLevel(logging.DEBUG)

import os
import logging
import json
import re
import uuid
from datetime import datetime

import gspread
from google.oauth2.service_account import Credentials
from fastapi import FastAPI, Request
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN             = os.getenv("BOT_TOKEN")
GROUP_ID              = os.getenv("GROUP_CHAT_ID")
WEBHOOK_URL           = os.getenv("WEBHOOK_URL")
GOOGLE_CREDS_JSON     = os.getenv("GOOGLE_CREDS_JSON")
GOOGLE_SHEET_ID       = os.getenv("GOOGLE_SHEET_ID")
GOOGLE_WORKSHEET_NAME = os.getenv("GOOGLE_WORKSHEET_NAME")
PORT                  = int(os.getenv("PORT", 8000))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö env-vars
required = [BOT_TOKEN, GROUP_ID, WEBHOOK_URL, GOOGLE_CREDS_JSON, GOOGLE_SHEET_ID, GOOGLE_WORKSHEET_NAME]
if not all(required):
    logging.error("–ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets
creds_info  = json.loads(GOOGLE_CREDS_JSON)
credentials = Credentials.from_service_account_info(creds_info, scopes=["https://www.googleapis.com/auth/spreadsheets"])
gc          = gspread.Client(auth=credentials)
worksheet   = gc.open_by_key(GOOGLE_SHEET_ID).worksheet(GOOGLE_WORKSHEET_NAME)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot     = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp      = Dispatcher(bot, storage=storage)
app     = FastAPI()

# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    lang    = State()
    fio     = State()
    phone   = State()
    company = State()
    tariff  = State()

# –°–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
MESSAGES = {
    'ru': {
        'select_lang': '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:',
        'ask_fio': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:',
        'invalid_fio': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û. –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã:',
        'ask_phone': '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+71234567890):',
        'invalid_phone': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. +71234567890:',
        'ask_company': '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:',
        'ask_tariff': '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:',
        'thank_you': '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ö–æ–¥: {code}. –°–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è.',
        'cancelled': '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.'
    },
    'uz': {
        'select_lang': 'Tilni tanlang:',
        'ask_fio': "Iltimos, to'liq ismingizni kiriting:",
        'invalid_fio': "Ism noto'g'ri. Faqat harflar va bo'sh joylar:",
        'ask_phone': "Telefon raqamingizni kiriting (+998901234567):",
        'invalid_phone': "Format noto'g'ri. +998901234567:",
        'ask_company': 'Kompaniya nomi:',
        'ask_tariff': 'Tarifni tanlang:',
        'thank_you': "Arizangiz qabul qilindi! Kodi: {code}. Tez orada bog'lanamiz.",
        'cancelled': "Amal bekor qilindi."
    }
}

# /start ‚Äî –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
@dp.message_handler(commands=['start'], state='*')
async def cmd_start(message: types.Message, state: FSMContext):
    kb = InlineKeyboardMarkup().row(
        InlineKeyboardButton('–†—É—Å—Å–∫–∏–π üá∑üá∫', callback_data='lang_ru'),
        InlineKeyboardButton("O'zbekcha üá∫üáø", callback_data='lang_uz'),
    )
    await state.finish()
    await bot.send_message(
        chat_id=message.chat.id,
        text=MESSAGES['ru']['select_lang'],
        reply_markup=kb
    )
    await Form.lang.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@dp.callback_query_handler(lambda c: c.data in ['lang_ru','lang_uz'], state=Form.lang)
async def process_lang(callback: types.CallbackQuery, state: FSMContext):
    # —É–±–∏—Ä–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏
    await callback.message.edit_reply_markup(None)

    lang = 'ru' if callback.data == 'lang_ru' else 'uz'
    await state.update_data(lang=lang, start_ts=datetime.utcnow().isoformat())
    # —Å—Ä–∞–∑—É —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –§–ò–û
    await bot.send_message(
        chat_id=callback.message.chat.id,
        text=MESSAGES[lang]['ask_fio'],
        reply_markup=ReplyKeyboardRemove()
    )
    await Form.fio.set()
    await callback.answer()

# /cancel
@dp.message_handler(commands=['cancel'], state='*')
async def cmd_cancel(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get('lang','ru')
    await state.finish()
    await message.answer(MESSAGES[lang]['cancelled'])

# –§–ò–û
@dp.message_handler(state=Form.fio)
async def process_fio(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get('lang','ru')
    if not re.match(r'^[A-Za-z–ê-–Ø–∞-—è–Å—ë ]+$', message.text):
        return await message.answer(MESSAGES[lang]['invalid_fio'])
    await state.update_data(fio=message.text)
    await Form.phone.set()
    await message.answer(MESSAGES[lang]['ask_phone'])

# –¢–µ–ª–µ—Ñ–æ–Ω
@dp.message_handler(state=Form.phone)
async def process_phone(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get('lang','ru')
    if not re.match(r'^\+?\d{7,15}$', message.text):
        return await message.answer(MESSAGES[lang]['invalid_phone'])
    await state.update_data(phone=message.text)
    await Form.company.set()
    await message.answer(MESSAGES[lang]['ask_company'])

# –ö–æ–º–ø–∞–Ω–∏—è
@dp.message_handler(state=Form.company)
async def process_company(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get('lang','ru')
    await state.update_data(company=message.text)
    kb = InlineKeyboardMarkup().row(
        InlineKeyboardButton('–°—Ç–∞—Ä—Ç', callback_data='tariff_–°—Ç–∞—Ä—Ç'),
        InlineKeyboardButton('–ë–∏–∑–Ω–µ—Å', callback_data='tariff_–ë–∏–∑–Ω–µ—Å'),
        InlineKeyboardButton('–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤', callback_data='tariff_–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤')
    )
    await Form.tariff.set()
    await message.answer(MESSAGES[lang]['ask_tariff'], reply_markup=kb)

# –¢–∞—Ä–∏—Ñ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
@dp.callback_query_handler(lambda c: c.data.startswith('tariff_'), state=Form.tariff)
async def process_tariff(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    lang = data.get('lang','ru')
    tariff = callback.data.split('_',1)[1]
    code = uuid.uuid4().hex[:8].upper()
    start_ts = data['start_ts']
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    duration = (datetime.utcnow() - datetime.fromisoformat(start_ts)).total_seconds()
    # –ó–∞–ø–∏—Å—å
    row = [data['fio'], data['phone'], data['company'], tariff, start_ts, datetime.utcnow().isoformat(), duration, code]
    try:
        worksheet.append_row(row)
    except:
        logging.exception("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets")
    # –í –≥—Ä—É–ø–ø—É
    await bot.send_message(int(GROUP_ID), (
        f"üì• –ó–∞—è–≤–∫–∞:\nüë§ {data['fio']}\nüìû {data['phone']}\nüè¢ {data['company']}\nüí≥ {tariff}\nüîñ {code}"
    ))
    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_message(callback.message.chat.id,
        MESSAGES[lang]['thank_you'].format(code=code), reply_markup=ReplyKeyboardRemove()
    )
    await state.finish()
    await callback.answer()

# /status
@dp.message_handler(commands=['status'], state='*')
async def cmd_status(message: types.Message):
    parts = message.text.split(maxsplit=1)
    if len(parts)<2:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /status <–∫–æ–¥>")
    code = parts[1].strip().upper()
    for r in worksheet.get_all_records():
        if str(r.get('Code','')).upper()==code:
            return await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –≤ —Ä–∞–±–æ—Ç–µ.")
    await message.answer(f"–ö–æ–¥ {code} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# Webhook endpoint
@app.post('/webhook')
async def webhook(request: Request):
    payload = await request.json()
    update = types.Update(**payload)
    await dp.process_update(update)
    return {'ok':True}

# Run
if __name__=='__main__':
    import uvicorn
    uvicorn.run('main:app', host='0.0.0.0', port=PORT)
