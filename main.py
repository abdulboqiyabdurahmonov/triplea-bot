import os
import logging
import json
import re
from datetime import datetime

import gspread
from google.oauth2.service_account import Credentials
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN             = os.getenv("BOT_TOKEN")
GROUP_ID              = os.getenv("GROUP_CHAT_ID")
WEBHOOK_URL           = os.getenv("WEBHOOK_URL")
GOOGLE_CREDS_JSON     = os.getenv("GOOGLE_CREDS_JSON")
GOOGLE_SHEET_ID       = os.getenv("GOOGLE_SHEET_ID")
GOOGLE_WORKSHEET_NAME = os.getenv("GOOGLE_WORKSHEET_NAME")
PORT                  = int(os.getenv("PORT", 8000))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
required = [BOT_TOKEN, GROUP_ID, WEBHOOK_URL, GOOGLE_CREDS_JSON, GOOGLE_SHEET_ID, GOOGLE_WORKSHEET_NAME]
if not all(required):
    logging.error("–ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ env vars: BOT_TOKEN, GROUP_CHAT_ID, WEBHOOK_URL, GOOGLE_CREDS_JSON, GOOGLE_SHEET_ID, GOOGLE_WORKSHEET_NAME")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets client
creds_info = json.loads(GOOGLE_CREDS_JSON)
credentials = Credentials.from_service_account_info(creds_info, scopes=["https://www.googleapis.com/auth/spreadsheets"])
gc = gspread.Client(auth=credentials)
worksheet = gc.open_by_key(GOOGLE_SHEET_ID).worksheet(GOOGLE_WORKSHEET_NAME)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
app = FastAPI()

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
stats = {"start_count": 0, "complete_count": 0, "durations": []}

# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    fio     = State()
    phone   = State()
    company = State()
    tariff  = State()

# –ü–∞—Ä—Å–µ—Ä —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
def parse_request_text(text: str):
    # –û–∂–∏–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º 'üë§ –§–ò–û: ...', 'üìû –¢–µ–ª–µ—Ñ–æ–Ω: ...', 'üè¢ –ö–æ–º–ø–∞–Ω–∏—è: ...', 'üí≥ –¢–∞—Ä–∏—Ñ: ...'
    data = {}
    for line in text.splitlines():
        if line.startswith('üë§') and ':' in line:
            data['fio'] = line.split(':',1)[1].strip()
        if line.startswith('üìû') and ':' in line:
            data['phone'] = line.split(':',1)[1].strip()
        if line.startswith('üè¢') and ':' in line:
            data['company'] = line.split(':',1)[1].strip()
        if line.startswith('üí≥') and ':' in line:
            data['tariff'] = line.split(':',1)[1].strip()
    return data

# /start: –Ω–∞—á–∞–ª–æ FSM-—Å–µ—Å—Å–∏–∏
@dp.message_handler(commands=["start"], state="*")
async def cmd_start(message: types.Message, state: FSMContext):
    await state.finish()
    stats["start_count"] += 1
    await state.set_state(Form.fio.state)
    await state.update_data(start_ts=datetime.utcnow().isoformat())
    await bot.send_message(chat_id=message.chat.id, text="–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ FSM
@dp.message_handler(state=Form.fio)
async def process_fio(message: types.Message, state: FSMContext):
    await state.update_data(fio=message.text)
    await state.set_state(Form.phone.state)
    await bot.send_message(message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

@dp.message_handler(state=Form.phone)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await state.set_state(Form.company.state)
    await bot.send_message(message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:")

@dp.message_handler(state=Form.company)
async def process_company(message: types.Message, state: FSMContext):
    await state.update_data(company=message.text)
    await state.set_state(Form.tariff.state)
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("–°—Ç–∞—Ä—Ç", "–ë–∏–∑–Ω–µ—Å", "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤")
    await bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=kb)

@dp.message_handler(state=Form.tariff)
async def process_tariff(message: types.Message, state: FSMContext):
    await state.update_data(tariff=message.text)
    data = await state.get_data()
    # —Ä–∞—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏
    start = datetime.fromisoformat(data['start_ts'])
    end = datetime.utcnow()
    duration = (end - start).total_seconds()
    stats['complete_count'] += 1
    stats['durations'].append(duration)
    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Google Sheets
    row = [data.get('fio'), data.get('phone'), data.get('company'), data.get('tariff'), data['start_ts'], end.isoformat(), duration]
    try:
        worksheet.append_row(row)
        logging.info("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –±–æ—Ç–∞ –≤ Google Sheets")
    except Exception:
        logging.exception("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –±–æ—Ç–∞")
    # –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É
    text = ("üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –∏–∑ Telegram-–±–æ—Ç–∞:\n" +
            f"üë§ {data.get('fio')}\n" +
            f"üìû {data.get('phone')}\n" +
            f"üè¢ {data.get('company')}\n" +
            f"üí≥ {data.get('tariff')}")
    await bot.send_message(chat_id=int(GROUP_ID), text=text)
    await state.finish()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫ –∏–∑ –≥—Ä—É–ø–ø—ã, –≤–∫–ª—é—á–∞—è —Å–∞–π—Ç–∞
@dp.message_handler(lambda msg: msg.chat.id == int(GROUP_ID), content_types=types.ContentTypes.TEXT)
async def log_group_request(msg: types.Message):
    # –†–∞–∑–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
    if msg.text.startswith("üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞"):
        data = parse_request_text(msg.text)
        # –í—Ä–µ–º—è –∏ –∏—Å—Ç–æ—á–Ω–∏–∫
        source = "–±–æ—Ç" if "–±–æ—Ç–∞" in msg.text else "—Å–∞–π—Ç–∞"
        now = datetime.utcfromtimestamp(msg.date).isoformat()
        row = [
            data.get('fio'), data.get('phone'), data.get('company'), data.get('tariff'),
            now, source
        ]
        try:
            worksheet.append_row(row)
            logging.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∑–∞—è–≤–∫–∞ {source} –≤ Google Sheets")
        except Exception:
            logging.exception(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ {source}")

# –í–µ–±—Ö—É–∫ –¥–ª—è Telegram
@app.post("/webhook")
async def telegram_webhook(request: Request):
    payload = await request.json()
    logging.info(f"Webhook payload: {payload!r}")
    update = types.Update(**payload)
    await dp.process_update(update)
    return {"ok": True}

# –≠–Ω–¥–ø–æ–∏–Ω—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@app.get("/stats")
async def get_stats():
    total = stats['start_count']
    done = stats['complete_count']
    conv = done / total if total > 0 else 0
    avg_time = sum(stats['durations']) / len(stats['durations']) if stats['durations'] else 0
    return {"start_count": total, "complete_count": done, "conversion_rate": conv, "avg_time_sec": avg_time}

from fastapi import HTTPException, Header

# –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á, —á—Ç–æ–±—ã –Ω–∏–∫—Ç–æ —á—É–∂–æ–π –Ω–µ –ø–æ—Å—Ç—É—á–∞–ª—Å—è
SITE_SECRET = os.getenv("SITE_WEBHOOK_SECRET")

@app.post("/site-request")
async def site_request(request: Request, x_site_secret: str = Header(...)):
    # 0) –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if SITE_SECRET is None or x_site_secret != SITE_SECRET:
        raise HTTPException(401, "Unauthorized")

    # 1) –ß–∏—Ç–∞–µ–º JSON –∏–∑ —Ç–µ–ª–∞
    payload = await request.json()
    # –û–∂–∏–¥–∞–µ–º —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ:
    # { "fio":"–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω", "phone":"+71234567890", "company":"Acme", "tariff":"–ë–∏–∑–Ω–µ—Å" }
    fio     = payload.get("fio")
    phone   = payload.get("phone")
    company = payload.get("company")
    tariff  = payload.get("tariff")
    if not all([fio, phone, company, tariff]):
        raise HTTPException(400, "Missing fields")

    # 2) –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google Sheets
    now = datetime.utcnow().isoformat()
    row = [fio, phone, company, tariff, now, "—Å–∞–π—Ç–∞"]
    try:
        worksheet.append_row(row)
        logging.info("‚úÖ –ó–∞–ø–∏—Å–∞–ª–∏ —Å–∞–π—Ç-–∑–∞—è–≤–∫—É –≤ Google Sheets")
    except Exception:
        logging.exception("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–∞–π—Ç-–∑–∞—è–≤–∫–∏")

    # 3) –®–ª—ë–º –≤ Telegram-–≥—Ä—É–ø–ø—É
    text = (
        "üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞:\n"
        f"üë§ {fio}\n"
        f"üìû {phone}\n"
        f"üè¢ {company}\n"
        f"üí≥ {tariff}"
    )
    await bot.send_message(chat_id=int(GROUP_ID), text=text)

    return {"ok": True}

# –ó–∞–ø—É—Å–∫ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=PORT)
