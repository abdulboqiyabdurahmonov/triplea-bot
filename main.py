import os
import logging
import json
from datetime import datetime

import gspread
from google.oauth2.service_account import Credentials
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, ReplyKeyboardRemove

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN            = os.getenv("BOT_TOKEN")
GROUP_ID             = os.getenv("GROUP_CHAT_ID")
WEBHOOK_URL          = os.getenv("WEBHOOK_URL")
GOOGLE_CREDS_JSON    = os.getenv("GOOGLE_CREDS_JSON")
GOOGLE_SHEET_ID      = os.getenv("GOOGLE_SHEET_ID")
GOOGLE_WORKSHEET_NAME= os.getenv("GOOGLE_WORKSHEET_NAME")
PORT                 = int(os.getenv("PORT", 8000))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö env vars
required = [BOT_TOKEN, GROUP_ID, WEBHOOK_URL, GOOGLE_CREDS_JSON, GOOGLE_SHEET_ID, GOOGLE_WORKSHEET_NAME]
if not all(required):
    logging.error("–ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ env vars: BOT_TOKEN, GROUP_CHAT_ID, WEBHOOK_URL, GOOGLE_CREDS_JSON, GOOGLE_SHEET_ID, GOOGLE_WORKSHEET_NAME")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets
creds_info = json.loads(GOOGLE_CREDS_JSON)
credentials = Credentials.from_service_account_info(creds_info, scopes=["https://www.googleapis.com/auth/spreadsheets"])
gc = gspread.Client(auth=credentials)
worksheet = gc.open_by_key(GOOGLE_SHEET_ID).worksheet(GOOGLE_WORKSHEET_NAME)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
app = FastAPI()

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
stats = {"start_count": 0, "complete_count": 0, "durations": []}

# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    fio     = State()
    phone   = State()
    company = State()
    tariff  = State()

# /start ‚Äî –Ω–∞—á–∞–ª–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
@dp.message_handler(commands=["start"], state="*")
async def cmd_start(message: types.Message, state: FSMContext):
    await state.finish()
    stats["start_count"] += 1
    await state.set_state(Form.fio.state)
    await state.update_data(start_ts=datetime.utcnow().isoformat())
    await bot.send_message(chat_id=message.chat.id, text="–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û
@dp.message_handler(state=Form.fio)
async def process_fio(message: types.Message, state: FSMContext):
    await state.update_data(fio=message.text)
    await state.set_state(Form.phone.state)
    await bot.send_message(chat_id=message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message_handler(state=Form.phone)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await state.set_state(Form.company.state)
    await bot.send_message(chat_id=message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏
@dp.message_handler(state=Form.company)
async def process_company(message: types.Message, state: FSMContext):
    await state.update_data(company=message.text)
    await state.set_state(Form.tariff.state)
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("–°—Ç–∞—Ä—Ç", "–ë–∏–∑–Ω–µ—Å", "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤")
    await bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
@dp.message_handler(state=Form.tariff)
async def process_tariff(message: types.Message, state: FSMContext):
    tariff = message.text
    # –û–ø–∏—Å–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤
    descriptions = {
        "–°—Ç–∞—Ä—Ç": "–¢–∞—Ä–∏—Ñ ¬´–°—Ç–∞—Ä—Ç¬ª ‚Äî –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –∫–æ–º–∞–Ω–¥, –≤–∫–ª—é—á–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.",
        "–ë–∏–∑–Ω–µ—Å": "–¢–∞—Ä–∏—Ñ ¬´–ë–∏–∑–Ω–µ—Å¬ª ‚Äî —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞: CRM-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞.",
        "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤": "–¢–∞—Ä–∏—Ñ ¬´–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤¬ª ‚Äî –ø–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç —É—Å–ª—É–≥ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π."
    }
    desc = descriptions.get(tariff)
    if desc:
        await bot.send_message(chat_id=message.chat.id, text=desc)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
    await state.update_data(tariff=tariff)
    data = await state.get_data()
    # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    start = datetime.fromisoformat(data['start_ts'])
    end = datetime.utcnow()
    duration = (end - start).total_seconds()
    stats['complete_count'] += 1
    stats['durations'].append(duration)
    # –ó–∞–ø–∏—Å—å –≤ Google Sheets
    row = [data['fio'], data['phone'], data['company'], data['tariff'], data['start_ts'], end.isoformat(), duration]
    try:
        worksheet.append_row(row)
        logging.info("‚úÖ –ó–∞–ø–∏—Å–∞–ª–∏ —Å—Ç—Ä–æ–∫—É –≤ Google Sheets")
    except Exception:
        logging.exception("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤ Google Sheets")
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É
    text = (
        f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –∏–∑ Telegram-–±–æ—Ç–∞:\n"
        f"üë§ –§–ò–û: {data['fio']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {data['company']}\n"
        f"üí≥ –¢–∞—Ä–∏—Ñ: {data['tariff']}"
    )
    await bot.send_message(chat_id=int(GROUP_ID), text=text)

# Endpoint –¥–ª—è –≤–µ–±—Ö—É–∫–∞
@app.post("/webhook")
async def telegram_webhook(request: Request):
    payload = await request.json()
    logging.info(f"Webhook payload: {payload!r}")
    update = types.Update(**payload)
    await dp.process_update(update)
    return {"ok": True}

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@app.get("/stats")
async def get_stats():
    total = stats['start_count']
    done = stats['complete_count']
    conv = done / total if total > 0 else 0
    avg_time = sum(stats['durations']) / len(stats['durations']) if stats['durations'] else 0
    return {"start_count": total, "complete_count": done, "conversion_rate": conv, "avg_time_sec": avg_time}

# –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=PORT)
