import os
import logging

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor

import gspread
from oauth2client.service_account import ServiceAccountCredentials

# ‚Äî‚Äî‚Äî –ü–∞—Ä–∞–º–µ—Ç—Ä—ã ‚Äî‚Äî‚Äî
API_TOKEN     = os.getenv('BOT_TOKEN', '–í–ê–®_–¢–û–ö–ï–ù_–ó–î–ï–°–¨')
GROUP_CHAT_ID = int(os.getenv('GROUP_CHAT_ID', '-1002344973979'))

CREDS_FILE       = 'credentials.json'        # —Ñ–∞–π–ª —Å –∫–ª—é—á–∞–º–∏ Google API
SPREADSHEET_NAME = '–ò–º—è_–≤–∞—à–µ–π_—Ç–∞–±–ª–∏—Ü—ã'
WORKSHEET_NAME   = '–õ–∏—Å—Ç1'
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp  = Dispatcher(bot, storage=MemoryStorage())

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets
scope = [
    'https://spreadsheets.google.com/feeds',
    'https://www.googleapis.com/auth/drive',
]
creds   = ServiceAccountCredentials.from_json_keyfile_name(CREDS_FILE, scope)
gc      = gspread.authorize(creds)
sheet   = gc.open(SPREADSHEET_NAME).worksheet(WORKSHEET_NAME)


class Form(StatesGroup):
    lang    = State()
    name    = State()
    phone   = State()
    company = State()
    tariff  = State()


@dp.message_handler(commands=['start'], state='*')
async def cmd_start(message: types.Message, state: FSMContext):
    await state.finish()
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("–†—É—Å—Å–∫–∏–π", "English")
    await Form.lang.set()
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=kb)


@dp.message_handler(state=Form.lang)
async def process_lang(message: types.Message, state: FSMContext):
    if message.text not in ["–†—É—Å—Å–∫–∏–π", "English"]:
        return await message.answer("–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–æ–π: –†—É—Å—Å–∫–∏–π –∏–ª–∏ English.")
    await state.update_data(lang=message.text)
    await Form.name.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:", reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(state=Form.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await Form.phone.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")


@dp.message_handler(state=Form.phone)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text.strip())
    await Form.company.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:")


@dp.message_handler(state=Form.company)
async def process_company(message: types.Message, state: FSMContext):
    await state.update_data(company=message.text.strip())
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("–°—Ç–∞—Ä—Ç", "–ë–∏–∑–Ω–µ—Å", "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤")
    await Form.tariff.set()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=kb)


@dp.message_handler(state=Form.tariff)
async def process_tariff(message: types.Message, state: FSMContext):
    if message.text not in ["–°—Ç–∞—Ä—Ç", "–ë–∏–∑–Ω–µ—Å", "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤"]:
        return await message.answer("–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ —Ç—Ä—ë—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –∫–Ω–æ–ø–∫–∞–º–∏.")
    await state.update_data(tariff=message.text)

    data = await state.get_data()
    text = (
        f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n\n"
        f"üåê –Ø–∑—ã–∫: {data['lang']}\n"
        f"üë§ –§–ò–û: {data['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {data['company']}\n"
        f"üíº –¢–∞—Ä–∏—Ñ: {data['tariff']}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram-–≥—Ä—É–ø–ø—É
    await bot.send_message(GROUP_CHAT_ID, text)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google Sheets
    sheet.append_row([
        data['lang'],
        data['name'],
        data['phone'],
        data['company'],
        data['tariff']
    ])

    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    await state.finish()


@dp.message_handler()
async def fallback(message: types.Message):
    await message.answer("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
