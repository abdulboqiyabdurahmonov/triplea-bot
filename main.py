# main.py

import os
import logging
import time

import gspread
import json
from oauth2client.service_account import ServiceAccountCredentials

from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from aiogram.utils.exceptions import TerminatedByOtherGetUpdates

@dp.errors_handler(exception=TerminatedByOtherGetUpdates)
async def ignore_conflict(update, exception):
    # –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ –¥–∞–ª—å—à–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    logging.warning("Ignored TerminatedByOtherGetUpdates ‚Äì –≤—Ç–æ—Ä–æ–π poll-–ø—Ä–æ—Å–Ω—É–ª—Å—è")
    return True


# ‚Äî‚Äî‚Äî –ü–∞—Ä–∞–º–µ—Ç—Ä—ã ‚Äî‚Äî‚Äî
API_TOKEN       = os.getenv('BOT_TOKEN')
GROUP_CHAT_ID   = int(os.getenv('GROUP_CHAT_ID'))
CREDS_FILE      = '/etc/secrets/triplea-bot-250fd4803dd8.json'
SPREADSHEET_ID  = '1AbCdEfGhIJkLmNoPqRsTuVwXyZ1234567890'
WORKSHEET_NAME  = '–õ–∏—Å—Ç1'
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

logging.basicConfig(level=logging.INFO)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets
scope = [
    'https://spreadsheets.google.com/feeds',
    'https://www.googleapis.com/auth/drive',
]
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDS_FILE, scope)
gc    = gspread.authorize(creds)

def get_sheet():
    return gc.open_by_key(SPREADSHEET_ID).worksheet(WORKSHEET_NAME)

bot = Bot(token=API_TOKEN)
dp  = Dispatcher(bot, storage=MemoryStorage())


class Form(StatesGroup):
    lang    = State()
    name    = State()
    phone   = State()
    company = State()
    tariff  = State()


@dp.message_handler(commands=['start'], state='*')
async def cmd_start(message: types.Message, state: FSMContext):
    await state.finish()
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("–†—É—Å—Å–∫–∏–π", "English")
    await Form.lang.set()
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=kb)


@dp.message_handler(state=Form.lang)
async def process_lang(message: types.Message, state: FSMContext):
    if message.text not in ["–†—É—Å—Å–∫–∏–π", "English"]:
        return await message.answer("–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–æ–π: –†—É—Å—Å–∫–∏–π –∏–ª–∏ English.")
    await state.update_data(lang=message.text)
    await Form.name.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:", reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(state=Form.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await Form.phone.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")


@dp.message_handler(state=Form.phone)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text.strip())
    await Form.company.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:")


@dp.message_handler(state=Form.company)
async def process_company(message: types.Message, state: FSMContext):
    await state.update_data(company=message.text.strip())
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("–°—Ç–∞—Ä—Ç", "–ë–∏–∑–Ω–µ—Å", "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤")
    await Form.tariff.set()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=kb)


@dp.message_handler(state=Form.tariff)
async def process_tariff(message: types.Message, state: FSMContext):
    if message.text not in ["–°—Ç–∞—Ä—Ç", "–ë–∏–∑–Ω–µ—Å", "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤"]:
        return await message.answer("–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ —Ç—Ä—ë—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –∫–Ω–æ–ø–∫–∞–º–∏.")
    await state.update_data(tariff=message.text)
    data = await state.get_data()

    text = (
        f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n\n"
        f"üåê –Ø–∑—ã–∫: {data['lang']}\n"
        f"üë§ –§–ò–û: {data['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {data['company']}\n"
        f"üíº –¢–∞—Ä–∏—Ñ: {data['tariff']}"
    )

    await bot.send_message(GROUP_CHAT_ID, text)

    sheet = get_sheet()
    sheet.append_row([
        data['lang'],
        data['name'],
        data['phone'],
        data['company'],
        data['tariff']
    ])

    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    await state.finish()


@dp.message_handler(lambda msg: msg.text and not msg.text.startswith('/'), state='*')
async def fallback(message: types.Message):
    await message.answer("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")


@dp.errors_handler(exception=TerminatedByOtherGetUpdates)
async def ignore_conflict(update, exception):
    logging.warning("Ignored TerminatedByOtherGetUpdates ‚Äì retrying polling")
    return True


async def on_startup(dp: Dispatcher):
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    await bot.delete_webhook(drop_pending_updates=True)
    logging.info("Webhook deleted, ready to poll")


def run():
    # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º polling –≤ —Ü–∏–∫–ª, —á—Ç–æ–±—ã –ø—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    while True:
        try:
            executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
            break
        except TerminatedByOtherGetUpdates:
            logging.warning("Another polling detected, retry in 5s")
            time.sleep(5)
        except Exception:
            logging.exception("Unexpected error, exiting")
            break


if __name__ == '__main__':
    run()
