# main.py

import os
import logging
import time
import gspread
from oauth2client.service_account import ServiceAccountCredentials

from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from aiogram.utils.exceptions import TerminatedByOtherGetUpdates

# ‚Äî‚Äî‚Äî –ü–∞—Ä–∞–º–µ—Ç—Ä—ã ‚Äî‚Äî‚Äî
API_TOKEN       = os.getenv('BOT_TOKEN')
GROUP_CHAT_ID   = int(os.getenv('GROUP_CHAT_ID'))
CREDS_FILE      = '/etc/secrets/triplea-bot-250fd4803dd8.json'
SPREADSHEET_ID  = '1AbCdEfGhIJkLmNoPqRsTuVwXyZ1234567890'
WORKSHEET_NAME  = '–õ–∏—Å—Ç1'
# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

logging.basicConfig(level=logging.INFO)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets
scope = [
    'https://spreadsheets.google.com/feeds',
    'https://www.googleapis.com/auth/drive',
]
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDS_FILE, scope)
gc    = gspread.authorize(creds)

def get_sheet():
    return gc.open_by_key(SPREADSHEET_ID).worksheet(WORKSHEET_NAME)

bot = Bot(token=API_TOKEN)
dp  = Dispatcher(bot, storage=MemoryStorage())

# –¢–µ–∫—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –ª–æ–∫–∞–ª–∏
prompts = {
    '–†—É—Å—Å–∫–∏–π': {
        'invalid_lang':    "–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–æ–π: –†—É—Å—Å–∫–∏–π –∏–ª–∏ –£–∑–±–µ–∫—Å–∫–∏–π.",
        'ask_name':        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
        'ask_phone':       "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        'ask_company':     "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:",
        'ask_tariff':      "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:",
        'invalid_tariff':  "–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ —Ç—Ä—ë—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –∫–Ω–æ–ø–∫–∞–º–∏.",
        'thank_you':       "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.",
        'sheet_error':     "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É, –Ω–æ –≤ –≥—Ä—É–ø–ø—É –æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.",
        'fallback':        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
    },
    '–£–∑–±–µ–∫—Å–∫–∏–π': {
        'invalid_lang':    "Iltimos, tugmalardan foydalanib tanlang: Ruscha yoki O'zbekcha.",
        'ask_name':        "Iltimos, ismingiz va familiyangizni kiriting:",
        'ask_phone':       "Iltimos, telefon raqamingizni kiriting:",
        'ask_company':     "Iltimos, kompaniya nomini kiriting:",
        'ask_tariff':      "Iltimos, tarifni tanlang:",
        'invalid_tariff':  "Iltimos, quydagi tariflardan birini tanlang tugmalar orqali.",
        'thank_you':       "Rahmat! Murojaatingiz yuborildi.",
        'sheet_error':     "‚ö†Ô∏è Arizani jadvalga saqlashda muammo yuz berdi, lekin guruhga yuborildi.",
        'fallback':        "/start buyrug'ini kiriting, iltimos."
    }
}

class Form(StatesGroup):
    lang    = State()
    name    = State()
    phone   = State()
    company = State()
    tariff  = State()

@dp.message_handler(commands=['start'], state='*')
async def cmd_start(message: types.Message, state: FSMContext):
    await state.finish()
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("–†—É—Å—Å–∫–∏–π", "–£–∑–±–µ–∫—Å–∫–∏–π")
    await Form.lang.set()
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=kb)

# ‚îÄ‚îÄ –í –º–µ—Å—Ç–µ, –≥–¥–µ –≤—ã —Å—Ç—Ä–æ–∏—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–∞—Ä–∏—Ñ–æ–≤ ‚îÄ‚îÄ
@dp.message_handler(state=Form.company)
async def process_company(message: types.Message, state: FSMContext):
    await state.update_data(company=message.text.strip())
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    # –°–Ω–∞—á–∞–ª–∞ –∫–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª‚Ä¶
    kb.add("–ù–∞–∑–∞–¥")
    # ‚Ä¶–ø–æ—Ç–æ–º —Ç–∞—Ä–∏—Ñ—ã
    kb.add("–°—Ç–∞—Ä—Ç", "–ë–∏–∑–Ω–µ—Å", "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤")
    await Form.tariff.set()
    await message.answer(prompts[await state.get_data()]['ask_tariff'], reply_markup=kb)


# ‚îÄ‚îÄ –°–Ω–∏–∑—É, –ø–æ—Å–ª–µ –≤—Å–µ—Ö –≤–∞—à–∏—Ö @dp.message_handler-–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ù–∞–∑–∞–¥ ‚îÄ‚îÄ

# 1) –ù–∞–∑–∞–¥ —Å —ç—Ç–∞–ø–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –Ω–∞ –≤—ã–±–æ—Ä –∫–æ–º–ø–∞–Ω–∏–∏
@dp.message_handler(lambda m: m.text == "–ù–∞–∑–∞–¥", state=Form.tariff)
async def back_to_company(message: types.Message, state: FSMContext):
    await Form.company.set()
    data = await state.get_data()
    await message.answer(prompts[data['lang']]['ask_company'],
                         reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                                      .add("–ù–∞–∑–∞–¥")
                                      .add("–°—Ç–∞—Ä—Ç", "–ë–∏–∑–Ω–µ—Å", "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤"))

# 2) –ù–∞–∑–∞–¥ —Å —ç—Ç–∞–ø–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ —ç—Ç–∞–ø –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message_handler(lambda m: m.text == "–ù–∞–∑–∞–¥", state=Form.company)
async def back_to_phone(message: types.Message, state: FSMContext):
    await Form.phone.set()
    data = await state.get_data()
    await message.answer(prompts[data['lang']]['ask_phone'],
                         reply_markup=types.ReplyKeyboardRemove()

# 3) –ù–∞–∑–∞–¥ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞ –≤–≤–æ–¥ –§–ò–û
@dp.message_handler(lambda m: m.text == "–ù–∞–∑–∞–¥", state=Form.phone)
async def back_to_name(message: types.Message, state: FSMContext):
    await Form.name.set()
    data = await state.get_data()
    await message.answer(prompts[data['lang']]['ask_name'],
                         reply_markup=types.ReplyKeyboardRemove())

# 4) –ù–∞–∑–∞–¥ —Å –§–ò–û –Ω–∞ –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
@dp.message_handler(lambda m: m.text == "–ù–∞–∑–∞–¥", state=Form.name)
async def back_to_lang(message: types.Message, state: FSMContext):
    await Form.lang.set()
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("–†—É—Å—Å–∫–∏–π", "–£–∑–±–µ–∫—Å–∫–∏–π")
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=kb)

# (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≤—Å–µ–º —Ö–æ—á–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å FSM:
@dp.message_handler(lambda m: m.text == "–û—Ç–º–µ–Ω–∞", state='*')
async def cancel_all(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–û–ö, –æ—Ç–º–µ–Ω–µ–Ω–æ. /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=types.ReplyKeyboardRemove())


    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
    data = await state.get_data()
    text = (
        f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n\n"
        f"üåê –Ø–∑—ã–∫: {data['lang']}\n"
        f"üë§ –§–ò–û: {data['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {data['company']}\n"
        f"üíº –¢–∞—Ä–∏—Ñ: {data['tariff']}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram-–≥—Ä—É–ø–ø—É
    await bot.send_message(GROUP_CHAT_ID, text)

    # –ó–∞–ø–∏—Å—å –≤ Google Sheets ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–æ–±—â–∏–º
    try:
        sheet = get_sheet()
        sheet.append_row([
            data['lang'],
            data['name'],
            data['phone'],
            data['company'],
            data['tariff']
        ])
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")
        await message.answer(prompts[lang]['sheet_error'])
    else:
        await message.answer(prompts[lang]['thank_you'])

    await state.finish()

# ‚îÄ‚îÄ –≤ –∫–æ–Ω—Ü–µ –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞, –∑–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π fallback —ç—Ç–∏–º:

@dp.message_handler(
    lambda msg: msg.text and not msg.text.startswith('/'),
    state=None              # <‚Äî –ª–æ–≤–∏–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ state
)
async def fallback(message: types.Message):
    # –µ—Å–ª–∏ FSM —É–∂–µ –æ–∫–æ–Ω—á–µ–Ω–∞, –Ω–æ —é–∑–µ—Ä –ø–∏—à–µ—Ç —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ ‚Äî –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –µ–º—É /start
    await message.answer("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")

# ‚îÄ‚îÄ –Ω–∏–∂–µ –≤–∞—à on_startup –∏ –∑–∞–ø—É—Å–∫ polling –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ‚îÄ‚îÄ
async def on_startup(dp: Dispatcher):
    await bot.delete_webhook(drop_pending_updates=True)
    logging.info("Webhook —É–¥–∞–ª—ë–Ω, –≥–æ—Ç–æ–≤ –∫ polling")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)

        try:
            executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
            break
        except TerminatedByOtherGetUpdates:
            logging.warning("–ö–æ–Ω—Ñ–ª–∏–∫—Ç polling, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫")
            time.sleep(5)

if __name__ == '__main__':
    run()
