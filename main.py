import os, logging
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, ReplyKeyboardRemove

logging.basicConfig(level=logging.INFO)

BOT_TOKEN   = os.getenv("BOT_TOKEN")
GROUP_ID    = os.getenv("GROUP_CHAT_ID")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT        = int(os.getenv("PORT", 8000))

if not BOT_TOKEN or not GROUP_ID or not WEBHOOK_URL:
    logging.error("–ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    exit(1)

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
app = FastAPI()

class Form(StatesGroup):
    fio     = State()
    phone   = State()
    company = State()
    tariff  = State()

@dp.message_handler(commands=["start"], state="*")
async def cmd_start(msg: types.Message, state: FSMContext):
    await state.finish()
    await Form.fio.set()
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –§–ò–û:")

@dp.message_handler(state=Form.fio)
async def process_fio(msg: types.Message, state: FSMContext):
    await state.update_data(fio=msg.text)
    await Form.next()
    await msg.answer("–¢–µ–ø–µ—Ä—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

@dp.message_handler(state=Form.phone)
async def process_phone(msg: types.Message, state: FSMContext):
    await state.update_data(phone=msg.text)
    await Form.next()
    await msg.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:")

@dp.message_handler(state=Form.company)
async def process_company(msg: types.Message, state: FSMContext):
    await state.update_data(company=msg.text)
    await Form.next()
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("–°—Ç–∞—Ä—Ç", "–ë–∏–∑–Ω–µ—Å", "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤")
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=kb)

@dp.message_handler(state=Form.tariff)
async def process_tariff(msg: types.Message, state: FSMContext):
    await state.update_data(tariff=msg.text)
    data = await state.get_data()
    text = (
        f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –∏–∑ Telegram-–±–æ—Ç–∞:\n"
        f"üë§ –§–ò–û: {data['fio']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {data['company']}\n"
        f"üí≥ –¢–∞—Ä–∏—Ñ: {data['tariff']}"
    )
    await bot.send_message(chat_id=int(GROUP_ID), text=text)
    await msg.answer("–°–ø–∞—Å–∏–±–æ, –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", reply_markup=ReplyKeyboardRemove())
    await state.finish()

@app.post("/webhook")
async def telegram_webhook(request: Request):
    upd = types.Update(**await request.json())
    await dp.process_update(upd)
    return {"ok": True}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=PORT)
from aiogram import Bot
from aiogram.dispatcher.dispatcher import Dispatcher

@app.post("/webhook")
async def telegram_webhook(request: Request):
    payload = await request.json()
    update = types.Update(**payload)

    # üëâ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –±–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    Bot.set_current(bot)
    Dispatcher.set_current(dp)

    await dp.process_update(update)

    # üëâ –°–±—Ä–∞—Å—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å contextvars
    Dispatcher.set_current(None)
    Bot.set_current(None)

    return {"ok": True}
