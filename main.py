import os
import logging
import json
import re
import uuid
from datetime import datetime

import gspread
from google.oauth2.service_account import Credentials
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN             = os.getenv("BOT_TOKEN")
GROUP_ID              = os.getenv("GROUP_CHAT_ID")
WEBHOOK_URL           = os.getenv("WEBHOOK_URL")
GOOGLE_CREDS_JSON     = os.getenv("GOOGLE_CREDS_JSON")
GOOGLE_SHEET_ID       = os.getenv("GOOGLE_SHEET_ID")
GOOGLE_WORKSHEET_NAME = os.getenv("GOOGLE_WORKSHEET_NAME")
PORT                  = int(os.getenv("PORT", 8000))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
required = [BOT_TOKEN, GROUP_ID, WEBHOOK_URL, GOOGLE_CREDS_JSON, GOOGLE_SHEET_ID, GOOGLE_WORKSHEET_NAME]
if not all(required):
    logging.error("–ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ env vars: BOT_TOKEN, GROUP_CHAT_ID, WEBHOOK_URL, GOOGLE_CREDS_JSON, GOOGLE_SHEET_ID, GOOGLE_WORKSHEET_NAME")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets client
creds_info = json.loads(GOOGLE_CREDS_JSON)
credentials = Credentials.from_service_account_info(creds_info, scopes=["https://www.googleapis.com/auth/spreadsheets"])
gc = gspread.Client(auth=credentials)
worksheet = gc.open_by_key(GOOGLE_SHEET_ID).worksheet(GOOGLE_WORKSHEET_NAME)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
app = FastAPI()

# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    lang    = State()
    fio     = State()
    phone   = State()
    company = State()
    tariff  = State()

# –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤: Russian –∏ Uzbek
MESSAGES = {
    'ru': {
        'select_lang': '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:',
        'ask_fio': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:',
        'invalid_fio': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:',
        'ask_phone': '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +71234567890):',
        'invalid_phone': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç +71234567890. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:',
        'ask_company': '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:',
        'ask_tariff': '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:',
        'thank_you': '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ö–æ–¥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {code}. –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.',
        'cancelled': '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.'
    },
    'uz': {
        'select_lang': 'Tilni tanlang:',
        'ask_fio': "Iltimos, to'liq ismingizni kiriting:",
        'invalid_fio': "Ism noto'g'ri. Faqat harflar va bo'sh joylardan foydalaning. Qayta urinib ko'ring:",
        'ask_phone': "Telefon raqamingizni kiriting (masalan, +998901234567):",
        'invalid_phone': "Noto'g'ri raqam. +998901234567 formatidan foydalaning. Qayta urinib ko'ring:",
        'ask_company': 'Kompaniya nomini kiriting:',
        'ask_tariff': 'Tarifni tanlang:',
        'thank_you': "Arizangiz qabul qilindi! Kuzatish kodi: {code}. Tez orada bog'lanamiz.",
        'cancelled': "Amal bekor qilindi."
    }
}

# /start ‚Äî –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
@dp.message_handler(commands=['start'], state='*')
async def cmd_start(message: types.Message, state: FSMContext):
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton('–†—É—Å—Å–∫–∏–π üá∑üá∫', callback_data='lang_ru'),
        InlineKeyboardButton("O'zbekcha üá∫üáø", callback_data='lang_uz')
    )
    await state.finish()
    await bot.send_message(chat_id=message.chat.id, text=MESSAGES['ru']['select_lang'], reply_markup=kb)
    await Form.lang.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@dp.callback_query_handler(lambda c: c.data in ['lang_ru','lang_uz'], state=Form.lang)
async def process_lang(callback: types.CallbackQuery, state: FSMContext):
    lang = 'ru' if callback.data == 'lang_ru' else 'uz'
    await state.update_data(lang=lang, start_ts=datetime.utcnow().isoformat())
    await bot.send_message(chat_id=callback.message.chat.id, text=MESSAGES[lang]['ask_fio'])
    await Form.fio.set()
    await callback.answer()

# –ö–æ–º–∞–Ω–¥–∞ /cancel
@dp.message_handler(commands=['cancel'], state='*')
async def process_cancel(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get('lang', 'ru')
    await state.finish()
    await bot.send_message(chat_id=message.chat.id, text=MESSAGES[lang]['cancelled'])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û
@dp.message_handler(state=Form.fio)
async def process_fio(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get('lang', 'ru')
    if not re.match(r'^[A-Za-z–ê-–Ø–∞-—è–Å—ë ]+$', message.text):
        return await bot.send_message(chat_id=message.chat.id, text=MESSAGES[lang]['invalid_fio'])
    await state.update_data(fio=message.text)
    await Form.phone.set()
    await bot.send_message(chat_id=message.chat.id, text=MESSAGES[lang]['ask_phone'])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message_handler(state=Form.phone)
async def process_phone(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get('lang', 'ru')
    if not re.match(r'^\+?\d{7,15}$', message.text):
        return await bot.send_message(chat_id=message.chat.id, text=MESSAGES[lang]['invalid_phone'])
    await state.update_data(phone=message.text)
    await Form.company.set()
    await bot.send_message(chat_id=message.chat.id, text=MESSAGES[lang]['ask_company'])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏
@dp.message_handler(state=Form.company)
async def process_company(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get('lang', 'ru')
    await state.update_data(company=message.text)
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton('–°—Ç–∞—Ä—Ç', callback_data='tariff_–°—Ç–∞—Ä—Ç'),
        InlineKeyboardButton('–ë–∏–∑–Ω–µ—Å', callback_data='tariff_–ë–∏–∑–Ω–µ—Å'),
        InlineKeyboardButton('–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤', callback_data='tariff_–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤')
    )
    await Form.tariff.set()
    await bot.send_message(chat_id=message.chat.id, text=MESSAGES[lang]['ask_tariff'], reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
@dp.callback_query_handler(lambda c: c.data.startswith('tariff_'), state=Form.tariff)
async def process_tariff(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    lang = data.get('lang', 'ru')
    tariff = callback.data.split('_', 1)[1]
    code = uuid.uuid4().hex[:8].upper()
    start_ts = data['start_ts']
    await state.update_data(tariff=tariff, code=code)

    # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    start = datetime.fromisoformat(start_ts)
    end = datetime.utcnow()
    duration = (end - start).total_seconds()

    # –ó–∞–ø–∏—Å—å –≤ Google Sheets
    row = [data['fio'], data['phone'], data['company'], tariff, start_ts, end.isoformat(), duration, code]
    try:
        worksheet.append_row(row)
        logging.info("‚úÖ –ó–∞–ø–∏—Å–∞–ª–∏ —Å—Ç—Ä–æ–∫—É –≤ Google Sheets")
    except Exception:
        logging.exception("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram-–≥—Ä—É–ø–ø—É
    text = (
        f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –∏–∑ Telegram-–±–æ—Ç–∞:\n"
        f"üë§ {data['fio']}\n"
        f"üìû {data['phone']}\n"
        f"üè¢ {data['company']}\n"
        f"üí≥ {tariff}\n"
        f"üîñ –ö–æ–¥ –∑–∞—è–≤–∫–∏: {code}"
    )
    await bot.send_message(chat_id=int(GROUP_ID), text=text)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_message(
        chat_id=callback.message.chat.id,
        text=MESSAGES[lang]['thank_you'].format(code=code),
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.finish()
    await callback.answer()

# –ö–æ–º–∞–Ω–¥–∞ /status
@dp.message_handler(commands=['status'], state='*')
async def process_status(message: types.Message):
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        return await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /status <–∫–æ–¥ –∑–∞—è–≤–∫–∏>")
    code = parts[1].strip().upper()
    records = worksheet.get_all_records()
    for r in records:
        if str(r.get('Code', '')).upper() == code:
            return await message.reply(
                "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ."
            )
    await message.reply(f"–ó–∞—è–≤–∫–∞ —Å –∫–æ–¥–æ–º {code} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# Endpoint –¥–ª—è –≤–µ–±—Ö—É–∫–∞
@app.post("/webhook")
async def telegram_webhook(request: Request):
    payload = await request.json()
    update = types.Update(**payload)
    await dp.process_update(update)
    return {"ok": True}

# –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=PORT)
