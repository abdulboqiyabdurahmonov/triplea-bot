import os
import json
import logging
from datetime import datetime

import gspread
from oauth2client.service_account import ServiceAccountCredentials

from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils.executor import start_webhook

# ============================================================
# Configuration
# ============================================================
API_TOKEN        = os.getenv('BOT_TOKEN')
GROUP_CHAT_ID    = int(os.getenv('GROUP_CHAT_ID', '0'))
SPREADSHEET_ID   = os.getenv('SPREADSHEET_ID')
WORKSHEET_NAME   = os.getenv('WORKSHEET_NAME', '–õ–∏—Å—Ç1')   # –∑–∞—è–≤–∫–∏
CALC_SHEET_NAME  = os.getenv('CALC_WORKSHEET_NAME', 'Calc')
MANAGER_URL      = os.getenv('MANAGER_URL', 'https://t.me/+998946772399')

WEBHOOK_HOST     = os.getenv('WEBHOOK_HOST')  # e.g. https://triplea-bot-5.onrender.com
WEBHOOK_PATH     = f"/webhook/{API_TOKEN}"
WEBHOOK_URL      = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
WEBAPP_HOST      = '0.0.0.0'
WEBAPP_PORT      = int(os.getenv('PORT', 8000))

# ============================================================
# Bot & Dispatcher
# ============================================================
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# ============================================================
# Google Sheets setup
# ============================================================
SERVICE_CREDENTIALS_JSON = os.getenv('GOOGLE_CREDENTIALS_JSON')
if SERVICE_CREDENTIALS_JSON:
    creds_dict = json.loads(SERVICE_CREDENTIALS_JSON)
    credentials = ServiceAccountCredentials.from_json_keyfile_dict(
        creds_dict,
        ['https://spreadsheets.google.com/feeds',
         'https://www.googleapis.com/auth/drive']
    )
else:
    SERVICE_ACCOUNT_FILE = os.getenv('GOOGLE_APPLICATION_CREDENTIALS', 'credentials.json')
    credentials = ServiceAccountCredentials.from_json_keyfile_name(
        SERVICE_ACCOUNT_FILE,
        ['https://spreadsheets.google.com/feeds',
         'https://www.googleapis.com/auth/drive']
    )
gc = gspread.authorize(credentials)
# –æ—Å–Ω–æ–≤–Ω–æ–π –ª–∏—Å—Ç –¥–ª—è –∑–∞—è–≤–æ–∫
sheet_leads = gc.open_by_key(SPREADSHEET_ID).worksheet(WORKSHEET_NAME)

# –ª–∏—Å—Ç –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
try:
    sheet_calc = gc.open_by_key(SPREADSHEET_ID).worksheet(CALC_SHEET_NAME)
except gspread.exceptions.WorksheetNotFound:
    sh = gc.open_by_key(SPREADSHEET_ID)
    sheet_calc = sh.add_worksheet(title=CALC_SHEET_NAME, rows=2000, cols=20)
    sheet_calc.append_row([
        "timestamp_utc", "user_id", "username", "source",
        "operators", "salary", "calls_per_day", "work_days",
        "tax_pct", "hidden_pct", "cost_min", "cost_full"
    ])

# ============================================================
# Utility helpers
# ============================================================
def to_int(text, default=0):
    """Try to extract int from user text."""
    try:
        # remove spaces, commas
        clean = ''.join(ch for ch in str(text) if ch.isdigit())
        return int(clean) if clean else default
    except Exception:
        return default

def fmt(num):
    """Format int with space thousands."""
    try:
        return f"{int(round(num)):,}".replace(",", " ")
    except Exception:
        return str(num)

def calc_cost(ops, salary, calls_per_day, days, tax_pct, hidden_pct):
    """
    Unified cost formula.
    salary - per operator, before taxes
    tax_pct, hidden_pct in percents (0-100)
    """
    base   = salary * ops
    taxed  = base * (1 + (tax_pct/100.0))
    total  = taxed * (1 + (hidden_pct/100.0))
    total_calls = max(ops * calls_per_day * days, 1)
    cost_min  = taxed / total_calls
    cost_full = total / total_calls
    return base, taxed, total, total_calls, cost_min, cost_full

async def log_calc_result(source, user: types.User, data, cost_min, cost_full):
    """Append calculator data to Google Sheet."""
    try:
        sheet_calc.append_row([
            datetime.utcnow().isoformat(),
            user.id,
            f"@{user.username}" if user.username else "",
            source,
            data.get('ops'),
            data.get('salary'),
            data.get('calls'),
            data.get('days'),
            data.get('tax'),
            data.get('hidden'),
            cost_min,
            cost_full
        ])
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –≤ Google Sheets: {e}")

async def log_lead_to_sheet(name, phone, company, tariff, lang):
    try:
        sheet_leads.append_row([name, phone, company, tariff, lang, datetime.utcnow().isoformat()])
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ª–∏–¥–∞ –≤ Google Sheets: {e}")

# ============================================================
# FSM States: Lead Capture
# ============================================================
class Form(StatesGroup):
    lang    = State()
    name    = State()
    phone   = State()
    company = State()
    tariff  = State()

# ============================================================
# FSM States: Calculator
# ============================================================
class CalcForm(StatesGroup):
    lang    = State()  # reuse if known
    ops     = State()
    salary  = State()
    calls   = State()
    days    = State()
    tax     = State()
    hidden  = State()
    done    = State()

# ============================================================
# Start command
# ============================================================
@dp.message_handler(commands=['start'], state='*')
async def cmd_start(message: types.Message, state: FSMContext):
    # —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é: —è–∑—ã–∫ + –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
        InlineKeyboardButton("O'zbekcha", callback_data="lang_uz"),
    )
    keyboard.add(
        InlineKeyboardButton("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏", callback_data="calc_ru")
    )
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ TRIPLEA.\n\n"
        "–ü–æ–º–æ–≥–∞—é –±–∏–∑–Ω–µ—Å—É:\n"
        "‚Äî –ø—Ä–æ–¥–∞–≤–∞—Ç—å —á–µ—Ä–µ–∑ –∞–≤—Ç–æ–æ–±–∑–≤–æ–Ω—ã,\n"
        "‚Äî –≤–∑—ã—Å–∫–∏–≤–∞—Ç—å –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å,\n"
        "‚Äî —Å–æ–±–∏—Ä–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç—ã.\n\n"
        "–•–æ—á–µ—à—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å–≤–æ–µ–π –±–∞–∑–µ –∏–ª–∏ –ø–æ—Å—á–∏—Ç–∞—Ç—å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –∂–∏–≤—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤?\n"
        "üëá –í—ã–±–µ—Ä–∏ —è–∑—ã–∫ –∏–ª–∏ —Å—Ä–∞–∑—É –∑–∞–ø—É—Å—Ç–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä:",
        reply_markup=keyboard
    )
    await Form.lang.set()

# ============================================================
# Language selection
# ============================================================
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('lang_'), state=Form.lang)
async def process_lang(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    lang = callback.data.split('_')[1]
    await state.update_data(lang=lang)
    if lang == 'ru':
        await bot.send_message(callback.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    else:
        await bot.send_message(callback.from_user.id, "Iltimos, to‚Äòliq ismingizni yozing:")
    await Form.name.set()

# ============================================================
# Lead capture steps
# ============================================================
@dp.message_handler(state=Form.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    data = await state.get_data()
    if data.get('lang') == 'ru':
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    else:
        await message.answer("Telefon raqamingizni kiriting:")
    await Form.phone.set()

@dp.message_handler(state=Form.phone)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    data = await state.get_data()
    if data.get('lang') == 'ru':
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:")
    else:
        await message.answer("Kompaniyangiz nomini yozing:")
    await Form.company.set()

@dp.message_handler(state=Form.company)
async def process_company(message: types.Message, state: FSMContext):
    await state.update_data(company=message.text)
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("–°—Ç–∞—Ä—Ç (750 —Å—É–º/–∑–≤–æ–Ω–æ–∫)", callback_data="tariff_start"),
        InlineKeyboardButton("–ë–∏–∑–Ω–µ—Å (600 —Å—É–º/–∑–≤–æ–Ω–æ–∫)", callback_data="tariff_business"),
        InlineKeyboardButton("–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π (450 —Å—É–º/–∑–≤–æ–Ω–æ–∫)", callback_data="tariff_corp")
    )
    data = await state.get_data()
    if data.get('lang') == 'ru':
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=keyboard)
    else:
        await message.answer(
            "Tarifni tanlang:\n- Start (750 so‚Äòm/qo‚Äòng‚Äòiroq)\n- Biznes (600 so‚Äòm/qo‚Äòng‚Äòiroq)\n- Korporativ (450 so‚Äòm/qo‚Äòng‚Äòiroq)",
            reply_markup=keyboard
        )
    await Form.tariff.set()

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('tariff_'), state=Form.tariff)
async def process_tariff(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    tariff = callback.data.split('_', 1)[1]
    data = await state.get_data()
    name    = data.get('name')
    phone   = data.get('phone')
    company = data.get('company')
    lang    = data.get('lang', 'ru')

    # send to group
    text = (
        f"üì• –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ –±–æ—Ç–∞ ({lang})\n"
        f"üë§ –§–ò–û: {name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {company}\n"
        f"üíº –¢–∞—Ä–∏—Ñ: {tariff}"
    )
    if GROUP_CHAT_ID != 0:
        await bot.send_message(GROUP_CHAT_ID, text)

    # log to sheets
    await log_lead_to_sheet(name, phone, company, tariff, lang)

    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url=MANAGER_URL),
    )

    if lang == 'ru':
        thank_you = "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.\n\n–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    else:
        thank_you = "‚úÖ Rahmat! So‚Äòrovingiz qabul qilindi.\n\nMenejerimiz siz bilan tez orada bog‚Äòlanadi."

    await bot.send_message(callback.from_user.id, thank_you, reply_markup=keyboard)
    await state.finish()

# ============================================================
# Trigger calculator from callback (start screen)
# ============================================================
@dp.callback_query_handler(lambda c: c.data in ('calc_ru', 'calc_uz'), state='*')
async def calc_from_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    lang = 'ru' if callback.data == 'calc_ru' else 'uz'
    await start_calc_flow(callback.from_user.id, lang=lang)

# ============================================================
# Trigger calculator from message (/calc or text)
# ============================================================
@dp.message_handler(commands=['calc'], state='*')
async def calc_cmd(message: types.Message, state: FSMContext):
    # –µ—Å–ª–∏ —Ä–∞–Ω–µ–µ –≤—ã–±–∏—Ä–∞–ª–∏ —è–∑—ã–∫, –≤–æ–∑—å–º—ë–º –µ–≥–æ
    data = await state.get_data()
    lang = data.get('lang', 'ru')
    await start_calc_flow(message.chat.id, lang=lang)

@dp.message_handler(lambda m: m.text and m.text.lower() in ('–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä', 'kalkulyator', 'calc', 'calculator'), state='*')
async def calc_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get('lang', 'ru')
    await start_calc_flow(message.chat.id, lang=lang)

# ============================================================
# Calculator flow functions
# ============================================================
async def start_calc_flow(chat_id: int, lang='ru'):
    # set initial state
    state = dp.current_state(chat=chat_id, user=chat_id)
    await state.set_state(CalcForm.lang)
    await state.update_data(lang=lang)
    if lang == 'ru':
        await bot.send_message(chat_id, "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.\n\n–°–∫–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ —É –≤–∞—Å –≤ —à—Ç–∞—Ç–µ? (—á–∏—Å–ª–æ)")
    else:
        await bot.send_message(chat_id, "üßÆ Operator narxi kalkulyatori.\n\nNechta operator ishlaydi? (son)")

    await CalcForm.ops.set()

@dp.message_handler(state=CalcForm.ops)
async def calc_ops_handler(message: types.Message, state: FSMContext):
    ops = to_int(message.text, default=1)
    if ops <= 0:
        ops = 1
    await state.update_data(ops=ops)
    data = await state.get_data()
    if data.get('lang') == 'ru':
        await message.answer("–ó–∞—Ä–ø–ª–∞—Ç–∞ 1 –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (—Å—É–º/–º–µ—Å)? (–ø–æ —Ä—ã–Ω–∫—É ~5 000 000)")
    else:
        await message.answer("Bitta operator maoshi (so‚Äòm/oy)? (bozorda ~5 000 000)")
    await CalcForm.salary.set()

@dp.message_handler(state=CalcForm.salary)
async def calc_salary_handler(message: types.Message, state: FSMContext):
    salary = to_int(message.text, default=5_000_000)
    if salary < 1_000_000:
        # –º—è–≥–∫–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        await message.answer("‚ö†Ô∏è –¶–∏—Ñ—Ä–∞ –≤—ã–≥–ª—è–¥–∏—Ç –Ω–∏–∑–∫–æ–π. –í—Å—ë —Ä–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å? –ù–∞–ø–∏—à–∏—Ç–µ —Ç—É –∂–µ —Ü–∏—Ñ—Ä—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é.")
        salary = max(salary, 1_000_000)
    await state.update_data(salary=salary)
    data = await state.get_data()
    if data.get('lang') == 'ru':
        await message.answer("–°–∫–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –¥–µ–ª–∞–µ—Ç –æ–¥–∏–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä –≤ –¥–µ–Ω—å? (—Ä–µ–∫–æ–º–µ–Ω–¥—É—é 150)")
    else:
        await message.answer("Kuniga nechta qo‚Äòng‚Äòiroq? (tavsiya 150)")
    await CalcForm.calls.set()

@dp.message_handler(state=CalcForm.calls)
async def calc_calls_handler(message: types.Message, state: FSMContext):
    calls = to_int(message.text, default=150)
    if calls <= 0:
        calls = 150
    await state.update_data(calls=calls)
    data = await state.get_data()
    if data.get('lang') == 'ru':
        await message.answer("–°–∫–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –≤ –º–µ—Å? (22 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
    else:
        await message.answer("Oydagi ish kunlari soni? (22 default)")
    await CalcForm.days.set()

@dp.message_handler(state=CalcForm.days)
async def calc_days_handler(message: types.Message, state: FSMContext):
    days = to_int(message.text, default=22)
    if days <= 0 or days > 31:
        days = 22
    await state.update_data(days=days)
    data = await state.get_data()
    if data.get('lang') == 'ru':
        await message.answer("–ù–∞–ª–æ–≥–∏ + —Å–æ—Ü (% –æ—Ç –æ–∫–ª–∞–¥–∞). (30 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
    else:
        await message.answer("Soliqlar + ijtimoiy (%). (30 default)")
    await CalcForm.tax.set()

@dp.message_handler(state=CalcForm.tax)
async def calc_tax_handler(message: types.Message, state: FSMContext):
    tax = to_int(message.text, default=30)
    if tax < 0: tax = 0
    if tax > 100: tax = 100
    await state.update_data(tax=tax)
    data = await state.get_data()
    if data.get('lang') == 'ru':
        await message.answer("–°–∫—Ä—ã—Ç—ã–µ —Ä–∞—Å—Ö–æ–¥—ã (% –º–∏–Ω–∏–º—É–º). (15 —Ä–µ–∫–æ–º–µ–Ω–¥—É—é)")
    else:
        await message.answer("Yashirin xarajatlar (% min). (15 tavsiya)")
    await CalcForm.hidden.set()

@dp.message_handler(state=CalcForm.hidden)
async def calc_hidden_handler(message: types.Message, state: FSMContext):
    hidden = to_int(message.text, default=15)
    if hidden < 0: hidden = 0
    if hidden > 100: hidden = 100
    await state.update_data(hidden=hidden)

    # —Ä–∞—Å—á—ë—Ç
    data = await state.get_data()
    lang  = data.get('lang', 'ru')
    base, taxed, total, total_calls, cost_min, cost_full = calc_cost(
        ops=data['ops'],
        salary=data['salary'],
        calls_per_day=data['calls'],
        days=data['days'],
        tax_pct=data['tax'],
        hidden_pct=data['hidden']
    )

    # –ª–æ–≥–∏—Ä—É–µ–º
    await log_calc_result("telegram", message.from_user, data, cost_min, cost_full)

    # –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if lang == 'ru':
        txt = (
            "üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á—ë—Ç–∞*\n\n"
            f"–û–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: {data['ops']}\n"
            f"–§–û–¢ (—Å –Ω–∞–ª–æ–≥–∞–º–∏): {fmt(taxed)} —Å—É–º/–º–µ—Å\n"
            f"–ò—Ç–æ–≥–æ —Å–æ —Å–∫—Ä—ã—Ç—ã–º–∏: {fmt(total)} —Å—É–º/–º–µ—Å\n"
            f"–ó–≤–æ–Ω–∫–æ–≤ –≤ –º–µ—Å: {fmt(total_calls)}\n\n"
            f"–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–≤–æ–Ω–∫–∞ (–º–∏–Ω): *{fmt(cost_min)} —Å—É–º*\n"
            f"–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å (—Å–æ —Å–∫—Ä—ã—Ç—ã–º–∏): *{fmt(cost_full)} —Å—É–º*\n\n"
            "üîÅ –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: TripleA –ø–∞–∫–µ—Ç—ã 750 / 600 / 450 —Å—É–º/–∑–≤–æ–Ω–æ–∫.\n"
            "–•–æ—á–µ—à—å –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –¥–µ–º–æ?"
        )
        pdf_txt = "–ü–æ–ª—É—á–∏—Ç—å PDF —Ä–∞—Å—á—ë—Ç"
        mgr_txt = "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
        test_txt = "–¢–µ—Å—Ç 1000 –∑–≤–æ–Ω–∫–æ–≤"
    else:
        txt = (
            "üìä *Hisob natijasi*\n\n"
            f"Operatorlar: {data['ops']}\n"
            f"Oylik (soliqlar bilan): {fmt(taxed)} so‚Äòm/oy\n"
            f"Yashirin bilan: {fmt(total)} so‚Äòm/oy\n"
            f"Oydagi qo‚Äòng‚Äòiroqlar: {fmt(total_calls)}\n\n"
            f"Bir qo‚Äòng‚Äòiroq narxi (min): *{fmt(cost_min)} so‚Äòm*\n"
            f"Yashirin bilan: *{fmt(cost_full)} so‚Äòm*\n\n"
            "TripleA: 750 / 600 / 450 so‚Äòm.\n"
            "Tijoriy taklif yoki demo kerakmi?"
        )
        pdf_txt  = "PDF hisob"
        mgr_txt  = "Menejer bilan bog‚Äòlanish"
        test_txt = "1000 qo‚Äòng‚Äòiroq test"

    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton(pdf_txt, callback_data="calc_pdf"))
    kb.add(InlineKeyboardButton(mgr_txt, url=MANAGER_URL))
    kb.add(InlineKeyboardButton(test_txt, callback_data="calc_test1000"))

    await message.answer(txt, reply_markup=kb, parse_mode="Markdown")
    await CalcForm.done.set()

# ============================================================
# Calculator callback buttons
# ============================================================
@dp.callback_query_handler(lambda c: c.data == "calc_pdf", state='*')
async def calc_pdf_cb(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ç—å PDF –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª
    # –ø–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏–º –∑–∞–≥–ª—É—à–∫—É
    await bot.send_message(
        callback.from_user.id,
        "PDF —Ä–∞—Å—á—ë—Ç –≥–æ—Ç–æ–≤–∏—Ç—Å—è. –ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º —Ñ–∞–π–ª –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. "
        "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Å—Ä–æ—á–Ω–æ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤—ã—à–µ."
    )

@dp.callback_query_handler(lambda c: c.data == "calc_test1000", state='*')
async def calc_test_cb(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    # —É–≤–µ–¥–æ–º–∏–º –≥—Ä—É–ø–ø—É, —á—Ç–æ —é–∑–µ—Ä —Ö–æ—á–µ—Ç —Ç–µ—Å—Ç
    u = callback.from_user
    text = f"üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{u.username or u.id} –∑–∞–ø—Ä–æ—Å–∏–ª *–¢–ï–°–¢ 1000 –∑–≤–æ–Ω–∫–æ–≤* —á–µ—Ä–µ–∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä."
    if GROUP_CHAT_ID != 0:
        await bot.send_message(GROUP_CHAT_ID, text, parse_mode="Markdown")
    await bot.send_message(
        callback.from_user.id,
        "–û—Ç–ª–∏—á–Ω–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ç–µ—Å—Ç 1000 –∑–≤–æ–Ω–∫–æ–≤. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏."
    )

# ============================================================
# Webhook setup
# ============================================================
async def on_startup(dp):
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"Webhook set: {WEBHOOK_URL}")

async def on_shutdown(dp):
    logging.info("Shutting down..")
    await bot.delete_webhook()

# ============================================================
# Entrypoint
# ============================================================
if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )
